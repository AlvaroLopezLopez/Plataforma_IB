"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2504],{92504:function(n,s,e){e.d(s,{ie:function(){return w},X1:function(){return x},$e:function(){return Q},SD:function(){return r},lR:function(){return a},WC:function(){return m},D:function(){return h},AI:function(){return B},cK:function(){return f},ze:function(){return q},V4:function(){return y},fQ:function(){return $},LX:function(){return k},wK:function(){return O},S8:function(){return c},a0:function(){return o},M$:function(){return u},MA:function(){return A},ci:function(){return p},LO:function(){return C},ZT:function(){return G},ZS:function(){return b},UN:function(){return g},aO:function(){return I},i4:function(){return l},ah:function(){return S},RP:function(){return F}});var t=e(35917);let i={"\n  query assessment($id: String!) {\n    assessment(id: $id) {\n      id\n      ownerId\n      subjectId\n      name\n    }\n  }\n":t.Gi,"\n  query GetAssessmentByCode($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        showAnswerBox\n        automarkingEnabled\n        feedbackOnly\n        maximumTime\n        showTimer\n        assessmentQuestions {\n          questionId\n          index\n        }\n        studentAssessments {\n          id\n          studentId\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalQuestions\n        totalMarks\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n":t.gM,"\n  query GetAssessmentByIDForBootCamp($ids: [String!]!) {\n    searchAssessments(filter: {\n      withIds: $ids\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        showAnswerBox\n        maximumTime\n        showTimer\n      }\n    }\n  }\n":t.Z0,"\n  query GetAssessmentByCodeReview($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        maximumTime\n        showAnswerBox\n        automarkingEnabled\n        feedbackOnly\n        showTimer\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n        totalQuestions\n        totalMarks\n        sections {\n          assessmentId\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          createdAt\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n":t.Nd,"\n  query GetAssessmentByCodeMarking($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        maximumTime\n        showAnswerBox\n        showTimer\n        automarkingEnabled\n        solutionVisibility\n        feedbackOnly\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        sections {\n          id\n          index\n          name\n          description\n          numOptionalQuestionsToAnswer\n          questions {\n            id\n            questionId\n            index\n            name\n            type\n            assessmentSectionId\n            parts {\n              id\n              assessmentQuestionId\n              partId\n              index\n              name\n            }\n          }\n        }\n        studentAssessments {\n          id\n          studentId\n          startedAt\n          completedAt\n          markingStatus\n        	studentAssessmentQuestionAnswers {\n            assessmentQuestionId\n            studentAssessmentId\n            secondsSpent\n            answer\n            secondsSpent\n            isCompleted\n            automaticGradingComplete\n            automaticallyAssignedGrades\n            grades\n            markingStatus {\n              started\n              completed\n            }\n          }\n          studentAssessmentQuestionPartAnswers {\n            id\n            assessmentQuestionId\n            assessmentQuestionPartId\n            secondsSpent\n            answer\n            aiGenFeedback\n            aiGenGrade\n            publishedGrade\n            publishedFeedback\n          }\n          totalMarksObtained\n          questionsConsideredForGrading {\n            id,\n            questionMarksObtained\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalMarks\n        totalQuestions\n      }\n    }\n  }\n":t.QN,"\n  query GetAssessmentByCodeForView($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        maximumTime\n        showAnswerBox\n        showTimer\n        automarkingEnabled\n        solutionVisibility\n        feedbackOnly\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        sections {\n          assessmentId\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          createdAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n        studentAssessments {\n          id\n          studentId\n          startedAt\n          completedAt\n          markingStatus\n        	studentAssessmentQuestionAnswers {\n            assessmentQuestionId\n            studentAssessmentId\n            secondsSpent\n            answer\n            secondsSpent\n            isCompleted\n            automaticGradingComplete\n            automaticallyAssignedGrades\n            grades\n            markingStatus {\n              started\n              completed\n            }\n          }\n          studentAssessmentQuestionPartAnswers {\n            id\n            answer\n            assessmentQuestionId\n            assessmentQuestionPartId\n            aiGenFeedback\n            aiGenGrade\n            publishedGrade\n            publishedFeedback\n            secondsSpent\n          }\n          totalMarksObtained \n          questionsConsideredForGrading {\n            id,\n            questionMarksObtained\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalMarks\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n      }\n    }\n  }\n":t.OL,"\n  query searchAssessmentsOutline($filter: AssessmentFilter, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox \n        studentAssessments {\n          studentId\n          completedAt\n          markingStatus\n          studentAssessmentQuestionAnswers {\n            grades\n            answer\n          } \n        }\n      }\n    }\n  }\n":t.Vu,"\n  query SearchAssessmentByOwnerId($filter: AssessmentFilter!, $pagination: PaginationOptions!, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, pagination: $pagination, sort_by: $sortBy) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        expiresAt\n        showAnswerBox\n        automarkingEnabled\n        availableFrom\n        studentAssessmentOverviewStats {\n          submitted\n          inProgress\n          automarked\n          requiresReview\n          total\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          caseStudyId\n        }\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n":t.qu,"\n  query searchAssessmentsOutlineWithoutStudentAssessments($filter: AssessmentFilter, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox\n        maximumTime\n        assessmentQuestions {\n          id\n        }\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          caseStudyId\n        }\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n      }\n    }\n  }\n":t.TX,"\n  query getAssessmentSubjectIdById($id: String!) {\n    assessment(id: $id) {\n      subjectId\n    }\n  }\n":t.rZ,"\n  query getAssessmentStructureById($id: String!) {\n    assessment(id: $id) {\n      sections {\n        numOptionalQuestionsToAnswer\n        questions {\n          assessmentSectionId\n          createdAt\n          id\n          index\n          name\n          questionId\n          type\n          updatedAt\n          parts {\n              assessmentQuestionId\n              id\n              index\n              name\n              partId\n          }\n        }\n      }\n    }\n  }\n":t.Be,"\n  query searchAssessments($filter: AssessmentFilter!, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox\n        showTimer\n        solutionVisibility\n        maximumTime\n        feedbackOnly\n        automarkingEnabled\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n":t.f8,"\n  query searchMyStudentAssessments($filter: MyStudentAssessmentFilter!) {\n    searchMyStudentAssessments(filter: $filter) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        studentAssessmentQuestionAnswers {\n          id\n          assessmentQuestionId\n          studentAssessmentId\n          answer\n          isCompleted\n          secondsSpent\n          createdAt\n          grades\n        }\n        studentAssessmentQuestionPartAnswers {\n          id\n          answer\n          studentAssessmentId\n          assessmentQuestionId\n          assessmentQuestionPartId\n          aiGenFeedback\n          aiGenGrade\n          publishedGrade\n          publishedFeedback\n          secondsSpent\n        }\n        totalMarksObtained \n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n      }\n    }\n  }\n":t.ii,"\n  query searchMyStudentAssessmentsCoreFields($filter: MyStudentAssessmentFilter, $pagination: PaginationOptions!, $sortBy: [SortByOptionInput!]) {\n    searchMyStudentAssessments(filter: $filter, pagination: $pagination, sort_by: $sortBy) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n        studentAssessmentQuestionAnswers {\n          isCompleted\n          secondsSpent\n        }\n        studentAssessmentQuestionPartAnswers {\n          answer\n          secondsSpent\n          assessmentQuestionPartId\n        }\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n":t.Yk,"\n  query searchStudentAssessmentsOwnedByMe($filter: StudentAssessmentFilter!) {\n    searchStudentAssessmentsOwnedByMe(filter: $filter) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        studentAssessmentQuestionAnswers {\n          id\n          assessmentQuestionId\n          studentAssessmentId\n          answer\n          isCompleted\n          secondsSpent\n          grades\n        }\n        studentAssessmentQuestionPartAnswers {\n          id\n          answer\n          studentAssessmentId\n          assessmentQuestionId\n          assessmentQuestionPartId\n          aiGenFeedback\n          aiGenGrade\n          publishedGrade\n          publishedFeedback\n          secondsSpent\n        }\n        totalMarksObtained \n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n      }\n    }\n  }\n":t.$3,"\n  mutation updateStudentAssessment($id: String!, $input: StudentAssessmentUpdateInput!) {\n    updateStudentAssessment(id: $id, input: $input) {\n      id\n      studentId\n      assessmentId\n      startedAt\n      completedAt\n    }\n  }\n":t.SV,"\n  mutation upsertStudentAssessmentQuestionAnswer($assessmentQuestionId: String!, $studentAssessmentId: String!, $input: StudentAssessmentQuestionAnswerCreateInput!) {\n    upsertStudentAssessmentQuestionAnswer(assessmentQuestionId: $assessmentQuestionId, studentAssessmentId: $studentAssessmentId, input: $input) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n":t.u9,"\nmutation UpdateStudentAssessmentQuestionPartAnswer($answerId: String!, $input: StudentAssessmentQuestionPartAnswerUpdateInput!, $studentAssessmentId: String!) {\n  updateStudentAssessmentQuestionPartAnswer(answerId: $answerId, input: $input, studentAssessmentId: $studentAssessmentId  ) {\n    answer\n    assessmentQuestionId\n    assessmentQuestionPartId\n    id\n    studentAssessmentId\n  }\n}\n":t.uf,"\n  mutation IncreaseSecondsSpent($studentAssessmentId: String!, $answerId: String!, $secondsIncrement: Float!) {\n    increaseSecondsSpent(studentAssessmentId: $studentAssessmentId, answerId: $answerId, secondsIncrement: $secondsIncrement  ) {\n      id\n      secondsSpent\n      studentAssessmentId\n    }\n  }\n  ":t.nI,"\n  mutation updateStudentAssessmentQuestionAnswer($assessmentQuestionId: String!, $studentAssessmentId: String!, $input: StudentAssessmentQuestionAnswerCreateInput!) {\n    upsertStudentAssessmentQuestionAnswer(assessmentQuestionId: $assessmentQuestionId, studentAssessmentId: $studentAssessmentId, input: $input) {\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n":t.$K,"\n  mutation incrementStudentAssessmentQuestionAnswerSecondsSpent($studentAssessmentId: String!, $assessmentQuestionId: String!, $intervalSeconds: Float!) {\n    incrementStudentAssessmentQuestionAnswerSecondsSpent(studentAssessmentId: $studentAssessmentId, assessmentQuestionId: $assessmentQuestionId, intervalSeconds: $intervalSeconds) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n":t.Re,"\n  mutation createAssessmentWithSectionStructure($assessmentInput: AssessmentCreateInput!, $assessmentStructureInput: AssessmentSectionStructureInput!) {\n    createAssessmentWithSectionStructure(assessmentInput: $assessmentInput, assessmentStructureInput: $assessmentStructureInput) {\n      id\n      code\n    }\n  }\n":t.uH,"\n  mutation updateAssessmentWithSectionStructure($id: String!, $assessmentSectionStructureUpdateInput: AssessmentSectionStructureUpdateInput!) {\n    updateAssessmentWithSectionStructure(id: $id, assessmentSectionStructureUpdateInput: $assessmentSectionStructureUpdateInput) {\n      id\n      code\n    }\n  }\n":t.ye,"\n  mutation updateAssessment($id: String!, $input: AssessmentUpdateInput!) {\n    updateAssessment(id: $id, input: $input) {\n      id\n      code\n    }\n  }\n":t.fW,"\n  mutation deleteAssessment($id: String!) {\n    deleteAssessment(id: $id) {\n      id\n    }\n  }\n":t.iw,"\n  query studentAssessmentQuestionAnswer($id: String!) {\n    studentAssessmentQuestionAnswer(id: $id) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n":t.Qh,"\n  mutation publishResults($input: PublishResultsInput!) {\n    publishResults(input: $input) {\n      id\n      studentId\n      markingStatus\n    }\n  }\n":t.HL,"\nquery GetMyAssessmentAllocation($subjectGroupIds: [String!]!) {\n    getMyAssessmentAllocation(subjectGroupIds: $subjectGroupIds) {\n      allocation\n      created\n      allocationType\n      subjectGroupId\n    }\n}\n":t.Wx,"\n  query getAssessmentSummary($code: String!) {\n    getAssessmentSummary(code: $code) {\n      id\n      name\n      status\n      availableFrom\n      expiresAt\n      showTimer\n      maximumTime\n      solutionVisibility\n      showAnswerBox\n      totalQuestions\n      totalMarks\n      caseStudyId\n      isSingleSectionAndQuestion\n      totalPartsForSingleSectionAndQuestion\n    }\n  }\n":t.pS,"\n  mutation startAssessment($assessmentId: String!) {\n    startAssessment(assessmentId: $assessmentId) {\n      id\n    }\n  }\n":t._n,"\n  query getUserCaseStudy($id: String!) {\n    userCaseStudy(id: $id) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      overallFeedback\n      overallGrade\n      markingDetails {\n        totalMarksObtained\n        percentageMarksObtained\n      }\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }    \n    }\n  }\n":t.Nv,"\n  query GetUserCaseStudyByEachId($userId: String!, $caseStudyId: String!) {\n    userCaseStudyByEachIdV2(userId: $userId, caseStudyId: $caseStudyId) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      overallFeedback\n      overallGrade\n      markingDetails {\n        totalMarksObtained\n        percentageMarksObtained\n      }\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }\n    }\n  }\n":t.a7,"\n  mutation CreateUserCaseStudy($input: CreateUserCaseStudyArgsV2!) {\n    createUserCaseStudyV2(input: $input) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }\n    }\n  }\n":t.z4,"\n  mutation UpsertUserCaseStudyPartAnswer($input: UserCaseStudyPartAnswerUpdateWithWhereUniqueWithoutUserCaseStudyInput!) {\n    upsertUserCaseStudyPartAnswer(input: $input) {\n      userCaseStudyId\n      caseStudyPartId\n      answer\n    }\n  }\n":t.DP,"\n  query SearchUserCaseStudyPartAnswers($filter: UserCaseStudyPartAnswerFilter!) {\n    searchUserCaseStudyPartAnswers(filter: $filter) {\n      data {\n        userCaseStudyId\n        caseStudyPartId\n        answer\n        aiGenFeedback\n        aiGenMarks\n        markingStatus\n      }\n    }\n  }\n":t.mh,"\n  mutation submitUserCaseStudy($input: UserCaseStudySubmitArgsV3!) {\n    submitUserCaseStudyV3(input: $input) {\n      id\n      userId\n      caseStudyId\n      markingStatus\n      completedAt\n      submissionCount\n      partAnswers {\n        caseStudyPartId\n        answer\n        markingStatus\n      }\n    }\n  }\n":t.n3,"\n  mutation resetUserCaseStudy($id: String!) {\n    resetUserCaseStudy(id: $id) {\n      id\n      userId\n      caseStudyId\n      markingStatus\n      completedAt\n      submissionCount\n      partAnswers {\n        caseStudyPartId\n        answer\n        markingStatus\n      }\n    }\n  }\n":t.tM,"\nquery SearchAllMyUserCaseStudies($filter: UserCaseStudyFilterModelV2) {\n  searchMyUserCaseStudiesV2(filter: $filter) {\n    data {\n      id\n      userId\n      caseStudyId\n      progressByMark\n    } \n  }\n}\n":t.gV,"\n  query GetRecentAssessmentsAsStudent($pagination: PaginationOptions) {\n    getRecentAssessmentsAsStudent(pagination: $pagination) {\n      data {\n        id\n        code\n        name\n        expiresAt\n        completedAt\n        markingStatus\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n  ":t.MZ};function d(n){var s;return null!==(s=i[n])&&void 0!==s?s:{}}d("\n  query assessment($id: String!) {\n    assessment(id: $id) {\n      id\n      ownerId\n      subjectId\n      name\n    }\n  }\n"),d("\n  query GetAssessmentByCode($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        showAnswerBox\n        automarkingEnabled\n        feedbackOnly\n        maximumTime\n        showTimer\n        assessmentQuestions {\n          questionId\n          index\n        }\n        studentAssessments {\n          id\n          studentId\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalQuestions\n        totalMarks\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n"),d("\n  query GetAssessmentByIDForBootCamp($ids: [String!]!) {\n    searchAssessments(filter: {\n      withIds: $ids\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        showAnswerBox\n        maximumTime\n        showTimer\n      }\n    }\n  }\n");let a=d("\n  query GetAssessmentByCodeReview($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        solutionVisibility\n        maximumTime\n        showAnswerBox\n        automarkingEnabled\n        feedbackOnly\n        showTimer\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n        totalQuestions\n        totalMarks\n        sections {\n          assessmentId\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          createdAt\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n");d("\n  query GetAssessmentByCodeMarking($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        maximumTime\n        showAnswerBox\n        showTimer\n        automarkingEnabled\n        solutionVisibility\n        feedbackOnly\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        sections {\n          id\n          index\n          name\n          description\n          numOptionalQuestionsToAnswer\n          questions {\n            id\n            questionId\n            index\n            name\n            type\n            assessmentSectionId\n            parts {\n              id\n              assessmentQuestionId\n              partId\n              index\n              name\n            }\n          }\n        }\n        studentAssessments {\n          id\n          studentId\n          startedAt\n          completedAt\n          markingStatus\n        	studentAssessmentQuestionAnswers {\n            assessmentQuestionId\n            studentAssessmentId\n            secondsSpent\n            answer\n            secondsSpent\n            isCompleted\n            automaticGradingComplete\n            automaticallyAssignedGrades\n            grades\n            markingStatus {\n              started\n              completed\n            }\n          }\n          studentAssessmentQuestionPartAnswers {\n            id\n            assessmentQuestionId\n            assessmentQuestionPartId\n            secondsSpent\n            answer\n            aiGenFeedback\n            aiGenGrade\n            publishedGrade\n            publishedFeedback\n          }\n          totalMarksObtained\n          questionsConsideredForGrading {\n            id,\n            questionMarksObtained\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalMarks\n        totalQuestions\n      }\n    }\n  }\n");let r=d("\n  query GetAssessmentByCodeForView($code: String!) {\n    searchAssessments(filter: {\n      withCodes: [$code]\n    }) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        availableFrom\n        expiresAt\n        maximumTime\n        showAnswerBox\n        showTimer\n        automarkingEnabled\n        solutionVisibility\n        feedbackOnly\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        sections {\n          assessmentId\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          createdAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n        studentAssessments {\n          id\n          studentId\n          startedAt\n          completedAt\n          markingStatus\n        	studentAssessmentQuestionAnswers {\n            assessmentQuestionId\n            studentAssessmentId\n            secondsSpent\n            answer\n            secondsSpent\n            isCompleted\n            automaticGradingComplete\n            automaticallyAssignedGrades\n            grades\n            markingStatus {\n              started\n              completed\n            }\n          }\n          studentAssessmentQuestionPartAnswers {\n            id\n            answer\n            assessmentQuestionId\n            assessmentQuestionPartId\n            aiGenFeedback\n            aiGenGrade\n            publishedGrade\n            publishedFeedback\n            secondsSpent\n          }\n          totalMarksObtained \n          questionsConsideredForGrading {\n            id,\n            questionMarksObtained\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalMarks\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n      }\n    }\n  }\n");d("\n  query searchAssessmentsOutline($filter: AssessmentFilter, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox \n        studentAssessments {\n          studentId\n          completedAt\n          markingStatus\n          studentAssessmentQuestionAnswers {\n            grades\n            answer\n          } \n        }\n      }\n    }\n  }\n");let u=d("\n  query SearchAssessmentByOwnerId($filter: AssessmentFilter!, $pagination: PaginationOptions!, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, pagination: $pagination, sort_by: $sortBy) {\n      data {\n        id\n        ownerId\n        subjectId\n        name\n        code\n        status\n        expiresAt\n        showAnswerBox\n        automarkingEnabled\n        availableFrom\n        studentAssessmentOverviewStats {\n          submitted\n          inProgress\n          automarked\n          requiresReview\n          total\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          caseStudyId\n        }\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n"),o=d("\n  query searchAssessmentsOutlineWithoutStudentAssessments($filter: AssessmentFilter, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox\n        maximumTime\n        assessmentQuestions {\n          id\n        }\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          caseStudyId\n        }\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n      }\n    }\n  }\n");d("\n  query getAssessmentSubjectIdById($id: String!) {\n    assessment(id: $id) {\n      subjectId\n    }\n  }\n");let m=d("\n  query getAssessmentStructureById($id: String!) {\n    assessment(id: $id) {\n      sections {\n        numOptionalQuestionsToAnswer\n        questions {\n          assessmentSectionId\n          createdAt\n          id\n          index\n          name\n          questionId\n          type\n          updatedAt\n          parts {\n              assessmentQuestionId\n              id\n              index\n              name\n              partId\n          }\n        }\n      }\n    }\n  }\n"),c=d("\n  query searchAssessments($filter: AssessmentFilter!, $sortBy: [SortByOptionInput!]) {\n    searchAssessments(filter: $filter, sort_by: $sortBy) {\n      data {\n        id\n        code\n        ownerId\n        subjectId\n        name\n        expiresAt\n        availableFrom\n        status\n        showAnswerBox\n        showTimer\n        solutionVisibility\n        maximumTime\n        feedbackOnly\n        automarkingEnabled\n        assessmentQuestions {\n          id\n          questionId\n          index\n        }\n        source {\n          sourceEntityType\n          sourceEntityId\n          sourceAssessmentId\n          caseStudyId\n        }\n        totalQuestions\n        isSingleSectionAndQuestion\n        totalPartsForSingleSectionAndQuestion\n        sections {\n          assessmentId\n          createdAt\n          description\n          id\n          index\n          name\n          numOptionalQuestionsToAnswer\n          updatedAt\n          questions {\n              assessmentSectionId\n              createdAt\n              id\n              index\n              name\n              questionId\n              type\n              updatedAt\n              parts {\n                  assessmentQuestionId\n                  id\n                  index\n                  name\n                  partId\n              }\n          }\n        }\n      }\n    }\n  }\n"),A=d("\n  query searchMyStudentAssessments($filter: MyStudentAssessmentFilter!) {\n    searchMyStudentAssessments(filter: $filter) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        studentAssessmentQuestionAnswers {\n          id\n          assessmentQuestionId\n          studentAssessmentId\n          answer\n          isCompleted\n          secondsSpent\n          createdAt\n          grades\n        }\n        studentAssessmentQuestionPartAnswers {\n          id\n          answer\n          studentAssessmentId\n          assessmentQuestionId\n          assessmentQuestionPartId\n          aiGenFeedback\n          aiGenGrade\n          publishedGrade\n          publishedFeedback\n          secondsSpent\n        }\n        totalMarksObtained \n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n      }\n    }\n  }\n"),p=d("\n  query searchMyStudentAssessmentsCoreFields($filter: MyStudentAssessmentFilter, $pagination: PaginationOptions!, $sortBy: [SortByOptionInput!]) {\n    searchMyStudentAssessments(filter: $filter, pagination: $pagination, sort_by: $sortBy) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n        studentAssessmentQuestionAnswers {\n          isCompleted\n          secondsSpent\n        }\n        studentAssessmentQuestionPartAnswers {\n          answer\n          secondsSpent\n          assessmentQuestionPartId\n        }\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n");d("\n  query searchStudentAssessmentsOwnedByMe($filter: StudentAssessmentFilter!) {\n    searchStudentAssessmentsOwnedByMe(filter: $filter) {\n      data {\n        id\n        studentId\n        assessmentId\n        startedAt\n        completedAt\n        markingStatus\n        studentAssessmentQuestionAnswers {\n          id\n          assessmentQuestionId\n          studentAssessmentId\n          answer\n          isCompleted\n          secondsSpent\n          grades\n        }\n        studentAssessmentQuestionPartAnswers {\n          id\n          answer\n          studentAssessmentId\n          assessmentQuestionId\n          assessmentQuestionPartId\n          aiGenFeedback\n          aiGenGrade\n          publishedGrade\n          publishedFeedback\n          secondsSpent\n        }\n        totalMarksObtained \n        questionsConsideredForGrading {\n          id,\n          questionMarksObtained\n        }\n      }\n    }\n  }\n");let I=d("\n  mutation updateStudentAssessment($id: String!, $input: StudentAssessmentUpdateInput!) {\n    updateStudentAssessment(id: $id, input: $input) {\n      id\n      studentId\n      assessmentId\n      startedAt\n      completedAt\n    }\n  }\n"),S=d("\n  mutation upsertStudentAssessmentQuestionAnswer($assessmentQuestionId: String!, $studentAssessmentId: String!, $input: StudentAssessmentQuestionAnswerCreateInput!) {\n    upsertStudentAssessmentQuestionAnswer(assessmentQuestionId: $assessmentQuestionId, studentAssessmentId: $studentAssessmentId, input: $input) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n"),l=d("\nmutation UpdateStudentAssessmentQuestionPartAnswer($answerId: String!, $input: StudentAssessmentQuestionPartAnswerUpdateInput!, $studentAssessmentId: String!) {\n  updateStudentAssessmentQuestionPartAnswer(answerId: $answerId, input: $input, studentAssessmentId: $studentAssessmentId  ) {\n    answer\n    assessmentQuestionId\n    assessmentQuestionPartId\n    id\n    studentAssessmentId\n  }\n}\n"),y=d("\n  mutation IncreaseSecondsSpent($studentAssessmentId: String!, $answerId: String!, $secondsIncrement: Float!) {\n    increaseSecondsSpent(studentAssessmentId: $studentAssessmentId, answerId: $answerId, secondsIncrement: $secondsIncrement  ) {\n      id\n      secondsSpent\n      studentAssessmentId\n    }\n  }\n  ");d("\n  mutation updateStudentAssessmentQuestionAnswer($assessmentQuestionId: String!, $studentAssessmentId: String!, $input: StudentAssessmentQuestionAnswerCreateInput!) {\n    upsertStudentAssessmentQuestionAnswer(assessmentQuestionId: $assessmentQuestionId, studentAssessmentId: $studentAssessmentId, input: $input) {\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n");let $=d("\n  mutation incrementStudentAssessmentQuestionAnswerSecondsSpent($studentAssessmentId: String!, $assessmentQuestionId: String!, $intervalSeconds: Float!) {\n    incrementStudentAssessmentQuestionAnswerSecondsSpent(studentAssessmentId: $studentAssessmentId, assessmentQuestionId: $assessmentQuestionId, intervalSeconds: $intervalSeconds) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n"),w=d("\n  mutation createAssessmentWithSectionStructure($assessmentInput: AssessmentCreateInput!, $assessmentStructureInput: AssessmentSectionStructureInput!) {\n    createAssessmentWithSectionStructure(assessmentInput: $assessmentInput, assessmentStructureInput: $assessmentStructureInput) {\n      id\n      code\n    }\n  }\n"),g=d("\n  mutation updateAssessmentWithSectionStructure($id: String!, $assessmentSectionStructureUpdateInput: AssessmentSectionStructureUpdateInput!) {\n    updateAssessmentWithSectionStructure(id: $id, assessmentSectionStructureUpdateInput: $assessmentSectionStructureUpdateInput) {\n      id\n      code\n    }\n  }\n"),b=d("\n  mutation updateAssessment($id: String!, $input: AssessmentUpdateInput!) {\n    updateAssessment(id: $id, input: $input) {\n      id\n      code\n    }\n  }\n"),Q=d("\n  mutation deleteAssessment($id: String!) {\n    deleteAssessment(id: $id) {\n      id\n    }\n  }\n");d("\n  query studentAssessmentQuestionAnswer($id: String!) {\n    studentAssessmentQuestionAnswer(id: $id) {\n      id\n      assessmentQuestionId\n      studentAssessmentId\n      answer\n      isCompleted\n      secondsSpent\n      createdAt\n    }\n  }\n");let k=d("\n  mutation publishResults($input: PublishResultsInput!) {\n    publishResults(input: $input) {\n      id\n      studentId\n      markingStatus\n    }\n  }\n");d("\nquery GetMyAssessmentAllocation($subjectGroupIds: [String!]!) {\n    getMyAssessmentAllocation(subjectGroupIds: $subjectGroupIds) {\n      allocation\n      created\n      allocationType\n      subjectGroupId\n    }\n}\n");let h=d("\n  query getAssessmentSummary($code: String!) {\n    getAssessmentSummary(code: $code) {\n      id\n      name\n      status\n      availableFrom\n      expiresAt\n      showTimer\n      maximumTime\n      solutionVisibility\n      showAnswerBox\n      totalQuestions\n      totalMarks\n      caseStudyId\n      isSingleSectionAndQuestion\n      totalPartsForSingleSectionAndQuestion\n    }\n  }\n"),C=d("\n  mutation startAssessment($assessmentId: String!) {\n    startAssessment(assessmentId: $assessmentId) {\n      id\n    }\n  }\n"),f=d("\n  query getUserCaseStudy($id: String!) {\n    userCaseStudy(id: $id) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      overallFeedback\n      overallGrade\n      markingDetails {\n        totalMarksObtained\n        percentageMarksObtained\n      }\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }    \n    }\n  }\n"),q=d("\n  query GetUserCaseStudyByEachId($userId: String!, $caseStudyId: String!) {\n    userCaseStudyByEachIdV2(userId: $userId, caseStudyId: $caseStudyId) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      overallFeedback\n      overallGrade\n      markingDetails {\n        totalMarksObtained\n        percentageMarksObtained\n      }\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }\n    }\n  }\n"),x=d("\n  mutation CreateUserCaseStudy($input: CreateUserCaseStudyArgsV2!) {\n    createUserCaseStudyV2(input: $input) {\n      id\n      userId\n      caseStudyId\n      startedAt\n      completedAt\n      markingStatus\n      submissionCount\n      partAnswers{\n        caseStudyPartId\n        answer\n        markingStatus\n        aiGenFeedback\n        aiGenMarks\n      }\n    }\n  }\n"),F=d("\n  mutation UpsertUserCaseStudyPartAnswer($input: UserCaseStudyPartAnswerUpdateWithWhereUniqueWithoutUserCaseStudyInput!) {\n    upsertUserCaseStudyPartAnswer(input: $input) {\n      userCaseStudyId\n      caseStudyPartId\n      answer\n    }\n  }\n");d("\n  query SearchUserCaseStudyPartAnswers($filter: UserCaseStudyPartAnswerFilter!) {\n    searchUserCaseStudyPartAnswers(filter: $filter) {\n      data {\n        userCaseStudyId\n        caseStudyPartId\n        answer\n        aiGenFeedback\n        aiGenMarks\n        markingStatus\n      }\n    }\n  }\n");let G=d("\n  mutation submitUserCaseStudy($input: UserCaseStudySubmitArgsV3!) {\n    submitUserCaseStudyV3(input: $input) {\n      id\n      userId\n      caseStudyId\n      markingStatus\n      completedAt\n      submissionCount\n      partAnswers {\n        caseStudyPartId\n        answer\n        markingStatus\n      }\n    }\n  }\n"),O=d("\n  mutation resetUserCaseStudy($id: String!) {\n    resetUserCaseStudy(id: $id) {\n      id\n      userId\n      caseStudyId\n      markingStatus\n      completedAt\n      submissionCount\n      partAnswers {\n        caseStudyPartId\n        answer\n        markingStatus\n      }\n    }\n  }\n");d("\nquery SearchAllMyUserCaseStudies($filter: UserCaseStudyFilterModelV2) {\n  searchMyUserCaseStudiesV2(filter: $filter) {\n    data {\n      id\n      userId\n      caseStudyId\n      progressByMark\n    } \n  }\n}\n");let B=d("\n  query GetRecentAssessmentsAsStudent($pagination: PaginationOptions) {\n    getRecentAssessmentsAsStudent(pagination: $pagination) {\n      data {\n        id\n        code\n        name\n        expiresAt\n        completedAt\n        markingStatus\n      }\n      pagination {\n        page\n        per_page\n        total\n      }\n    }\n  }\n  ")}}]);